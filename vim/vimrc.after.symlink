" Turn backup off, since most stuff is in SVN, git etc. anyway...
set nobackup
set nowb
set noswapfile

" Linebreak on 500 characters
set lbr
set tw=500

" wrap lines
set wrap
set linebreak
set nolist
set textwidth=0

" mouse on
set mouse=a
if has("mouse_sgr")
    set ttymouse=sgr
else
    set ttymouse=xterm2
end

" Trim trailing whitespace
autocmd BufWritePre * %s/\s\+$//e


" => Turn persistent undo on
"    means that you can undo even when you close a buffer/VIM
try
    set undodir=~/.vim_runtime/temp_dirs/undodir
    set undofile
catch
endtry

" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
let mapleader = ","
let g:mapleader = ","


"" Colors
" Enable syntax highlighting
syntax on
"set background=dark
color molokai

" hides tilde from sidebar
highlight NonText ctermfg=bg

" disable folding
set nofoldenable


"" Tabs
" Be smart when using tabs
set smarttab
" translate tabs to spaces
set expandtab
set shiftwidth=4
set tabstop=4

" Show dotfiles in nerdtree
let NERDTreeShowHidden=1

"" Language stuff
" RSpec.vim mappings
map <Leader>t :call RunCurrentSpecFile()<CR>
map <Leader>s :call RunNearestSpec()<CR>
map <Leader>l :call RunLastSpec()<CR>
map <Leader>a :call RunAllSpecs()<CR>
let g:rspec_command = "Dispatch ./bin/rspec {spec}"

" Go
au FileType go nmap <leader>r <Plug>(go-run)
au FileType go nmap <leader>b <Plug>(go-build)
let g:syntastic_quiet_messages = { "regex": ['main redeclared', 'too many errors'] }

" Rust
let g:rustfmt_autosave = 1
let g:rust_recommended_style = 0

" Python
au BufNewFile,BufRead *.py
    \ set tabstop=4
    \ set softtabstop=4
    \ set shiftwidth=4
    \ set textwidth=79
    \ set expandtab
    \ set autoindent
    \ set fileformat=unix

" Flag unnecessary whitespace in python
au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/


